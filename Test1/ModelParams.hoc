/*
Author: 				Nikki Pelot
Date created: 			January 6, 2016
Date last modified: 	January 6, 2016

Description:


*/

// ******************************************* Define parameters *************************************************
proc model_globals() {
	fiber_type  = 1							// fiber_type = 1 for unmyelinated; fiber_type = 2 for myelinated
	
	// ***** General parameters
	celsius		= 37						// [degC]
	  if 		(fiber_type == 1) { 	v_init = -88.3 				// [mV]
	} else if   (fiber_type == 2) { 	v_init = -80 				// [mV]
	}
	dt			= 0.005 					// [ms]
	tstop 		= 250						// [ms]
	n_tsteps 	= int(tstop/dt) + 1			// int truncates twds zero; +1 accounts for the time point at t=0 [unitless]
	
	// Start before t=0 with large fixed timestep to allow the system to reach SS
	t_initSS	= -200						// [ms]
	dt_initSS	= 10						// [ms]
	
	// ***** Geometry
	// Unmyelinated fiber
	if (fiber_type == 1) {
		axonnodes	= 20000
		fiberd 		= 1							// Diameter of unmyelinated axon [um]
		deltax		= 5.0						// Length of segments of unmyelinated axon [um]
		
	// Myelinated fiber
	} else if (fiber_type == 2) {
		axonnodes	= 201						// Number of nodes of Ranvier [unitless]
		fiberD		= 1							// choose from 1, 2, 5.7, 7.3, 8.7, 10.0, 11.5, 12.8, 14.0, 15.0, 16.0; [um]
	}

	// ***** Instrumentation parameters
	// Intracellular test stimulus parameters
	IntraStim_PulseTrain_delay				= 25									// [ms]
	IntraStim_PulseTrain_pw					= 0.1									// [ms]
	IntraStim_PulseTrain_traindur			= tstop-IntraStim_PulseTrain_delay		// [ms]
	IntraStim_PulseTrain_freq				= 100									// [Hz]
	IntraStim_PulseTrain_amp				= 20									// [nA]
	IntraStim_PulseTrain_ind 				= int(6000/deltax)						// Index of node where intracellular stim is placed[unitless]
	
	// Extracellular test stimulus parameters
	strdef VeTime_fname
	VeTime_fname = "RectFullDC_dt0.001ms_tstop250ms_tstart1ms_tend250ms_freq5kHz_PW1-0.1ms_interphase0ms_PW2-0.1_20160128.txt"
	strdef VeSpace_fname
	VeSpace_fname = "Model119_FiberD5-7_Fascicle1_Axon1.dat"
	
	
		/*
	After calling VeSpace_read()...
	// convert to mV (required for e_extracellular)
	Ve_data = Ve_data.mul(1000)
	
	sprint(fname, "Data/Model%d/Model%d_TotalAppliedCurrent.dat", mymodel, mymodel)
	I_file = new File()
	I_file.ropen(fname)
	Iapplied = new Vector(1)
	Iapplied.scanf(I_file)
	I_file.close()
	
	// Scale Ve data for desired stimulation amplitude
	Ve_data_scaled = new Vector(axonnodes)
	Ve_data_scaled = Ve_data.mul(myvblocamp/Iapplied.x[0])
	*/
	
	
	// Recording & saving parameters
	saveflag_Vm 	= 1				// Flag = 1 if you want to record Vm(t) at checknode_values
	saveflag_gating = 1				// Flag = 1 if you want to record MRG gating params in time at checknode_values
	saveflag_Ve 	= 1				// Flag = 1 to create vector to record Vm(t) at one location during time loop
	saveflag_Istim 	= 1 			// Flag = 1 to record stim.i from IntracellularStim.hoc
	
	// Define nodes where Vm(t) and/or gating params are recorded
	Nchecknodes 					= 4 			// # recording nodes
	objref checknode_values
	checknode_values 				= new Vector(Nchecknodes,0)

	if (Nchecknodes == axonnodes) {
		for i = 0, axonnodes - 1 {
			checknode_values.x[i] 	= i
		}
	} else {
		axon_length = axonnodes*deltax				// Length of axon [um]
		checknode_values.x[0] 		= int(15000/deltax)
		checknode_values.x[1] 		= int(0.5*(axonnodes-1))
		checknode_values.x[2] 		= int((axon_length-15000)/deltax)
		checknode_values.x[3] 		= int((axon_length-5000)/deltax)
	}
	
	// Define node where Ve(t) is recorded
	// Define as vector so that it's in the same format as checknode_values, for Saving.hoc
	objref checknode_Ve_values
	checknode_Ve_values 			= new Vector(1,0)
	checknode_Ve_values.x[0]		= int((axonnodes-1)/2)
	
	// Define filenames for saving Vm, gating param's, Ve, and Istim time courses
	strdef Vm_fname_output
	strdef gating_m_fname_output, gating_h_fname_output, gating_mp_fname_output, gating_s_fname_output
	strdef Ve_fname_output, Istim_fname_output
	Vm_fname_output = "Vm_tmp.dat"
	gating_m_fname_output = "gating_m_tmp.dat"
	gating_h_fname_output = "gating_h_tmp.dat"
	gating_mp_fname_output = "gating_mp_tmp.dat"
	gating_s_fname_output = "gating_s_tmp.dat"
	Ve_fname_output = "Ve_tmp.dat"
	Istim_fname_output = "Istim_tmp.dat"
	

	//VBLOC stimulation parameters//
	Nvblocamp 			= 9							// number of stimulation amplitudes to try
	Nvblocfreq 			= 4							// number of stimulation frequencies to try
	
	// VBLOC
	vblocdelay1			= 1							// [ms]
	//vblocpw1			= 0.1						// [ms]
	vblocdur1			= tstop - vblocdelay1		// [ms]
	//vblocfreq1			= 5000						// [Hz]
	vblocistim1			= -1						//
	
	//vblocdelay2			= vblocdelay1 + vblocpw1	// [ms]	
	//vblocpw2			= vblocpw1					// [ms]
	//vblocdur2			= tstop - vblocdelay2		// [ms]
	//vblocfreq2			= vblocfreq1				// [Hz]
	vblocistim2			= -1 * vblocistim1			//

	
	
	// Model numbers are coded in modelnumbers.xlsx.
	Nmodel				= 1							// number of different models (meshes, element order, length and radius of the medium, etc. in COMSOL)
	Nfasc				= 30							// number of fascicles within axons being simulated
	Naxon				= 1							// number of axons per fascicle being simulated
	

	
}
model_globals ()


// Define models, fascicles, and axons to try
objref model_values, fasc_values, axon_values
model_values = new Vector(Nmodel,0)
fasc_values = new Vector(Nfasc,0)
axon_values = new Vector(Naxon,0)

model_values.x[0] = 119

for K = 0, Nfasc-1 {
	fasc_values.x[K] = K+1
}

axon_values.x[0] = 1

// Define vector of VBLOC amplitudes to try [mA]
objref vblocamp_values
vblocamp_values = new Vector(Nvblocamp,0)
//vblocamp_values.x[0] = 8
for K = 0, Nvblocamp-1 {
	vblocamp_values.x[K] = K
}

// Define vector of VBLOC frequencies to try [Hz]
objref vblocfreq_values
vblocfreq_values = new Vector(Nvblocfreq,0)
//vblocfreq_values.x[0] = 1000
vblocfreq_values.x[0] = 5000
vblocfreq_values.x[1] = 10000
vblocfreq_values.x[2] = 15000
vblocfreq_values.x[3] = 20000
