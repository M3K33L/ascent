// B-fiber class template for NEURON
// Constructor: bFiberBuilder(fiberD, len, type, temp, segdensity, ParticleID)

begintemplate bFiberBuilder

load_file("GeometryBuilder.hoc")

public fiberD, nsegments, Length, v_init
public section, sl, section_coord, node
create node[1], MYSA[1], FLUT[1], STIN[1]
objref section[1], section_coord, sl, conductances, conduct, InFile, gb
strdef name

proc build(){

// Versioning :
//
// Geometry: 0 - MRG
//           1 - Data fit
// 
// Localization: 0 - Nodal
//               1 - Nodal and Non-nodal
// 
// Diffusion Mechanisms: 0 - None
//                       1 - Longitudinal Na & K
// 
// Reversal Potential: 0 - Schild 1994
//                     1 - Stys 1997

geomVer = 1
locVer = 0
diffVer = 1
revVer = 1

    //  Electrical parameters
	rhoa	= 0.7e6 						// [ohm-um]
	mycm	= 0.1 							// lamella membrane; [uF/cm2]
	mygm	= 0.001 						// lamella membrane; [S/cm2]
	rhoe	= 1000  						// resistivity of extracellular medium; [ohm-cm]

	e_pas_Vrest = -78						// Internodal reversal potential. Set resting potential here.
	v_init = e_pas_Vrest					// Initialization voltage
	
	// Geometrical parameters [um]
	paranodes1  = 2*(axonnodes-1)  		// MYSA paranodes
	paranodes2  = 2*(axonnodes-1)  		// FLUT paranodes
	axoninter   = 6*(axonnodes-1)  		// STIN internodes
	nsegments 	= axonnodes + paranodes1 + paranodes2 + axoninter // Total number of segments

	create node[axonnodes], MYSA[paranodes1], FLUT[paranodes2], STIN[axoninter]


	space_p1	= 0.002						// Thickness of periaxonal space in MYSA sections [um]
	space_p2	= 0.004						// Thickness of periaxonal space in FLUT sections [um]
	space_i		= 0.004						// Thickness of periaxonal space in STIN sections [um]
	
	if(geomVer == 0) {
		nodelength	= 1.0						// Length of node of Ranvier [um]
		paralength1	= 3  						// Length of MYSA [um]

		if (fiberD==2) 			{axonD=1.6 nodeD=1.4 paraD1=1.4 paraD2=1.6 deltaz=200 paralength2=10 nl=30}
		interlength=(deltaz-nodelength-(2*paralength1)-(2*paralength2))/6

	} else if(geomVer == 1){
		gb = new GeometryBuilder(fiberD)

		nodelength = gb.nodelength
		axonD = gb.axonD
		nodeD = gb.nodeD
		
		paraD1 = gb.MYSAD
		paraD2 = gb.FLUTD
		nl = gb.nl
		paralength1 = gb.MYSAlength
		paralength2 = gb.FLUTlength
		interlength = gb.interlength	
	
	}

	//Ion conc init

	if(revVer == 0){
		ki_init = 145
		ko_init = 5.4
		nai_init = 8.9
		nao_init = 154
	} else if(revVer == 1){
		ki_init = 129
		ko_init = 2.9411
		nai_init = 19
		nao_init = 154.6011
	}

	printf("nodelength: %f\naxonD: %f\nnodeD: %f\nMYSAD: %f\nFLUTD: %f\nnl: %f\nMYSAL: %f\nFLUTL: %f\ninterL: %f\n", nodelength, axonD, nodeD, paraD1, paraD2, nl, paralength1, paralength2, interlength)
	Rpn0=(rhoa*.01)/(PI*((((nodeD/2)+space_p1)^2)-((nodeD/2)^2)))
	Rpn1=(rhoa*.01)/(PI*((((paraD1/2)+space_p1)^2)-((paraD1/2)^2)))
	Rpn2=(rhoa*.01)/(PI*((((paraD2/2)+space_p2)^2)-((paraD2/2)^2)))
	Rpx=(rhoa*.01)/(PI*((((axonD/2)+space_i)^2)-((axonD/2)^2)))

	Length = nodelength * axonnodes + paranodes1 * paralength1 + paranodes2 * paralength2 + interlength * axoninter

	objref section[nsegments]
	section_coord = new Vector(nsegments, 0)
	// For each node, generate a section and add membrane dynamics
	for i=0,axonnodes-1 {
		node[i] {			
			section[i*11]	= new SectionRef()
			nseg	= 1
			diam	= nodeD
			L		= nodelength
			Ra		= rhoa/10000
			
			// Passive end nodes
			if ((i == 0 || i == axonnodes-1) && (passive_end_nodes == 1)) {
				cm		= 2
				insert pas
				g_pas = 0.0001
				e_pas = e_pas_Vrest
				insert extracellular
				xg      = mygm/(nl*2) 
				xc      = mycm/(nl*2)
			} else {
			
					cm = 1.149452367				// [uF/cm^2] specific membrane capacitance (Schild 1994, A-type)
					
					F = 96485								// [C/mole] Faraday's Constant
					R = 8.314								// [J/(kg*mole*K)] Gas Constant
					
					if (locVer == 0){
						insert leak
						insert naf
						insert nas
						insert kd
						insert ka
						insert can
						insert cat
						insert kds
						insert pas
						insert kca
						
						insert caextscale
						insert caintscale
						insert CaPump
						insert NaCaPump
						insert NaKpumpSchild
					} else if (locVer == 1){
							// Schild 1994 ion channels
						insert leak
						insert naf
						insert nas
						insert kd
						insert ka
						insert can
						insert cat
						insert kds
						insert pas
						insert kca
						insert kld_node
						insert nald_node
						insert caextscale_node
						insert caintscale
						insert NaCaPump
						insert NaKpumpSchild

						L_caintscale = L
						nseg_caintscale = nseg
						L_caextscale_node = L
						nseg_caextscale_node = nseg

						if(diffVer == 1){
							fhspace_kld_node = space_p1
							fhspace_nald_node = space_p1
							kbath_kld_node = ko_init
							nabath_nald_node = nao_init
						}
					

					
					
					// Ionic concentrations
					cao0_ca_ion = 2.0							// [mM] Initial Cao Concentration
					cai0_ca_ion = .000117						// [mM] Initial Cai Concentrations
					
					// ki = 145.0	
					// ko = 5.4								// [mM] Internal K Concentration
					ki = ki_init
					ko = ko_init

					ki0_k_ion = ki_init
					ko0_k_ion = ko_init
					nai0_na_ion = nai_init
					nao0_na_ion = nao_init

					if(diffVer == 0){
						kstyle=ion_style("k_ion",1,2,0,0,0) 		// Allows ek to be calculated manually
						nastyle=ion_style("na_ion",1,2,0,0,0) 		// Allows ena to be calculated manually
					}else if(diffVer == 1){
						kstyle=ion_style("k_ion",1,2,1,1,0) 		// Allows ek to be calculated manually
						nastyle=ion_style("na_ion",1,2,1,1,0) 		// Allows ena to be calculated manually
					}
					//ek = 1000*((R*(celsius+273.15))/F)*log(ko/ki)									

					// nao = 154.0									// [mM] External Na Concentration
					// nai = 8.9									// [mM] Internal Na Concentration
					nao = nao_init
					nai = nai_init

					

				
					//ena = 1000*((R*(celsius+273.15))/F)*log(nao/nai)	// Manual Calculation of ena in order to use Schild F and R values
					
					
					// Conductances and voltage shift values for A-type (ion channel mod file defaults are for C-type) -- see Schild 1994
					// [S/cm^2] This block sets the conductance and shift values to their A-Fiber values, per Schild 1994

					shiftnaf_naf=0			// [mV] 
					shiftnas_nas=0
					shiftkd_kd=0
					shiftka_ka=0
					shiftkds_kds=0
					shiftcan_can=0
					shiftcan_cat=0
					

					//Read in conductance set
					conduct=new Vector()
					InFile=new File()
					sprint(name,"../../conductances/b_fiber_conductances.dat")
					InFile.ropen(name)
					conduct.scanf(InFile)
					execerror("error...")
					
					if(locVer == 0){
						
						gbar_naf = conduct.x(0)
						
						gbar_nas = conduct.x(1)
						gbar_cat = conduct.x(2)
						gbar_can = conduct.x(3)
						gbar_kds = conduct.x(4)
						gbar_ka = conduct.x(5) // 1/6 of MYSA conductance
						gbar_kd = conduct.x(6) // 1/6 of MYSA conductance
						gbar_kca = conduct.x(7)
						
						gbna_leak=1.14945E-05
					} else if(locVer == 1){


						gbar_naf = conduct.x(0)
						gbar_nas = conduct.x(1)
						gbar_cat = conduct.x(2)
						gbar_can = conduct.x(3)
						gbar_kds = conduct.x(4)
						gbar_ka = conduct.x(5)/6 // 1/6 of MYSA conductance
						gbar_kd = conduct.x(6)/6 // 1/6 of MYSA conductance
						gbar_kca = conduct.x(7)		
						INaKmax22_NaKpump = conduct.x(9)		
						gbna_leak=conduct.x(11)		
						gbca_leak=conduct.x(12)		

					}
					//Additional op params

					InFile.close()

					

				}
				
				insert extracellular xraxial=Rpn0 
				xg=1e10 // short circuit
				xc=0    // short circuit
			}
			
		}
	}
	
	// MYSA Paranode dynamics
	for i=0, paranodes1-1 {
		MYSA[i] {
			if ((i%2) == 0) {
				section[((i/2)*11)+1] = new SectionRef()
			} else {
				section[(((i+1)/2)*11)-1] = new SectionRef()
			}
			nseg	= 1
			diam	= fiberD
			L		= paralength1
			Ra		= rhoa*(1/(paraD1/fiberD)^2)/10000
			cm		= 2*paraD1/fiberD

				insert pas

				g_pas	= 0.001*paraD1/fiberD		
				e_pas	= e_pas_Vrest//-80//v_init
				if(locVer == 1){
					insert kd
					insert ka
					insert kds
					insert CaPump
					insert caextscale_nonnode
					insert caintscale

					if(diffVer == 1){
							insert kld_nonnode
							insert nald_nonnode
							fhspace_kld_nonnode = space_p1
							fhspace_nald_nonnode = space_p1
							kbath_kld_node = ko_init
							nabath_nald_node = nao_init
					}

					conduct=new Vector()
					InFile=new File()
					sprint(name,"../../conductances/b_fiber_conductances.dat")
					InFile.ropen(name)
					conduct.scanf(InFile)
					InFile.close()

					// ko = 5.4									// [mM] External K Concentration
					// ki = 145.0									// [mM] Internal K Concentration
					ko = ko_init
					ki = ki_init
					ki0_k_ion = ki_init
					ko0_k_ion = ko_init
					nai0_na_ion = nai_init
					nao0_na_ion = nao_init
					
					gbar_ka = conduct.x(5)/6
					gbar_kd = conduct.x(6)/6
					gbar_kds = conduct.x(4)/31
					ICaPmax22_CaPump = conduct.x(8)
					shiftka_ka = 0
					shiftkd_kd = 0
					shiftkds_kds=0

					if(diffVer == 0){
						kstyle=ion_style("k_ion",1,2,0,0,0) 		// Allows ek to be calculated manually
						nastyle=ion_style("na_ion",1,2,0,0,0) 		// Allows ena to be calculated manually
					} else if(diffVer == 1){
						kstyle=ion_style("k_ion",1,2,1,1,0) 		// Allows ek to be calculated manually
						nastyle=ion_style("na_ion",1,2,1,1,0) 		// Allows ena to be calculated manually
					}
					// nao = 154.0									// [mM] External Na Concentration
					// nai = 8.9									// [mM] Internal Na Concentration

					nao = nao_init
					nai = nai_init

					// ena = 1000*((R*(celsius+273.15))/F)*log(nao/nai)	
					
					L_caintscale = L
					nseg_caintscale = nseg
					L_caextscale_nonnode = L
					nseg_caextscale_nonnode = nseg
					
					// Ionic concentrations
					cao0_ca_ion = 2.0							// [mM] Initial Cao Concentration
					cai0_ca_ion = .000117						// [mM] Initial Cai Concentrations

					//Additional op params
					// INaKmax22_NaKpump = conduct.x(10)
					// gbna_leak=conduct.x(11)
					// gbca_leak=conduct.x(12)
				}
			insert extracellular xraxial=Rpn1 xg=mygm/(nl*2) xc=mycm/(nl*2)
		}
	}
	
	// FLUT Juxtaparanode Dynamics
	for i=0, paranodes2-1 {
		FLUT[i] {
			if ((i%2) == 0) {
				section[((i/2)*11)+2] = new SectionRef()
			} else {
				section[(((i+1)/2)*11)-2] = new SectionRef()
			}
			nseg	= 1
			diam	= fiberD
			L		= paralength2
			Ra		= rhoa*(1/(paraD2/fiberD)^2)/10000
			cm		= 2*paraD2/fiberD
				insert pas
				g_pas	= 0.0001*paraD2/fiberD		
				e_pas	= e_pas_Vrest
				if(locVer == 1){

					if(diffVer == 1){
							insert kld_nonnode
							insert nald_nonnode
							fhspace_kld_nonnode = space_p1
							fhspace_nald_nonnode = space_p1
							kbath_kld_node = ko_init
							nabath_nald_node = nao_init
					}
					if(diffVer == 0){
						kstyle=ion_style("k_ion",1,2,0,0,0) 		// Allows ek to be calculated manually
						nastyle=ion_style("na_ion",1,2,0,0,0) 		// Allows ena to be calculated manually
					} else if(diffVer == 1){
						kstyle=ion_style("k_ion",1,2,1,1,0) 		// Allows ek to be calculated manually
						nastyle=ion_style("na_ion",1,2,1,1,0) 		// Allows ena to be calculated manually
					}

					ko = ko_init
					ki = ki_init

					ki0_k_ion = ki_init
					ko0_k_ion = ko_init
					nai0_na_ion = nai_init
					nao0_na_ion = nao_init

					// Ionic concentrations
					cao0_ca_ion = 2.0							// [mM] Initial Cao Concentration
					cai0_ca_ion = .000117						// [mM] Initial Cai Concentrations


				}
			insert extracellular xraxial=Rpn2 xg=mygm/(nl*2) xc=mycm/(nl*2)
		}
	}
	
	// STIN Internode dynamics
	for i=0, axoninter-1 {
		STIN[i]{
			if ((i%6) == 5) {
				section[(((i+1)/6)*11)-3] = new SectionRef()
				//print (((i+1)/6)*11)-3
			} else if ((i%6) == 4) {
				section[(((i+2)/6)*11)-4] = new SectionRef()
				//print (((i+2)/6)*11)-4
			} else if ((i%6) == 3) {
				section[(((i+3)/6)*11)-5] = new SectionRef()
				//print (((i+3)/6)*11)-5
			} else if ((i%6) == 2) {
				section[(((i+4)/6)*11)-6] = new SectionRef()
				//print (((i+4)/6)*11)-6
			} else if ((i%6) == 1) {
				section[(((i+5)/6)*11)-7] = new SectionRef()
				//print (((i+5)/6)*11)-7
			} else if ((i%6) == 0) {
				section[(((i+6)/6)*11)-8] = new SectionRef()
				//print (((i+6)/6)*11)-8
			} 
			nseg	= 1
			diam	= fiberD
			L		= interlength
			Ra		= rhoa*(1/(axonD/fiberD)^2)/10000
			cm		= 2*axonD/fiberD


				insert pas
				g_pas	= 0.0001*axonD/fiberD
				e_pas	= e_pas_Vrest

				if(locVer == 1){
					insert kd
					insert ka
					insert kds
					insert naf
					insert kld_nonnode
					insert nald_nonnode
					insert caextscale_nonnode
					insert caintscale

					conduct=new Vector()
					InFile=new File()
					sprint(name,"../../conductances/b_fiber_conductances.dat")
					InFile.ropen(name)
					conduct.scanf(InFile)
					InFile.close()

					// ko = 10.4									// [mM] External K Concentration
					// ki = 145.0									// [mM] Internal K Concentration

					if(diffVer == 1){
							insert kld_nonnode
							insert nald_nonnode
							fhspace_kld_nonnode = space_p1
							fhspace_nald_nonnode = space_p1
							kbath_kld_node = ko_init
							nabath_nald_node = nao_init
					}
					if(diffVer == 0){
						kstyle=ion_style("k_ion",1,2,0,0,0) 		// Allows ek to be calculated manually
						nastyle=ion_style("na_ion",1,2,0,0,0) 		// Allows ena to be calculated manually
					} else if(diffVer == 1){
						kstyle=ion_style("k_ion",1,2,1,1,0) 		// Allows ek to be calculated manually
						nastyle=ion_style("na_ion",1,2,1,1,0) 		// Allows ena to be calculated manually
					}


					ki = ki_init
					ko = ko_init

					ki0_k_ion = ki_init
					ko0_k_ion = ko_init
					nai0_na_ion = nai_init
					nao0_na_ion = nao_init


					//ek = 1000*((R*(celsius+273.15))/F)*log(ko/ki)
					//ek = ekParam
					//printf("%f\n", ekParam)
					gbar_naf = conduct.x(0)/40
					gbar_kds = conduct.x(4)/30
					gbar_ka = conduct.x(5)/6
					gbar_kd = conduct.x(6)/6
					INaKmax22_NaKpump = conduct.x(10)

					
					
					shiftka_ka = 0
					shiftkd_kd = 0
					shift_naf = 0
					shiftkds_kds=0
					shiftnaf_naf=0

					nao = nao_init
					nai = nai_init

					L_caintscale = L
					nseg_caintscale = nseg
					L_caextscale_nonnode = L
					nseg_caextscale_nonnode = nseg
					
					// Ionic concentrations
					cao0_ca_ion = 2.0							// [mM] Initial Cao Concentration
					cai0_ca_ion = .000117						// [mM] Initial Cai Concentrations

				}
			
			insert extracellular xraxial=Rpx xg=mygm/(nl*2) xc=mycm/(nl*2)
		}

	}

	// Connect each compartment

	for i=0, axonnodes-2 {
		connect MYSA[2*i](0), node[i](1)
		connect FLUT[2*i](0), MYSA[2*i](1)
		connect STIN[6*i](0), FLUT[2*i](1)
		connect STIN[6*i+1](0), STIN[6*i](1)
		connect STIN[6*i+2](0), STIN[6*i+1](1)
		connect STIN[6*i+3](0), STIN[6*i+2](1)
		connect STIN[6*i+4](0), STIN[6*i+3](1)	
		connect STIN[6*i+5](0), STIN[6*i+4](1)	
		connect FLUT[2*i+1](0), STIN[6*i+5](1)
		connect MYSA[2*i+1](0), FLUT[2*i+1](1)
		connect node[i+1](0), MYSA[2*i+1](1)	
	}

	// Create section list with compartment center locations for extracellular stim calculations
	sl = new SectionList()
	currLoc = 0
	prevLen = 0
	nextLen = 0
	for i=0,nsegments-1{
		section[i].sec sl.append()	
		locMod = i%11
		if (locMod == 0){ //Node length
			nextLen = nodelength
		} else if (locMod == 1 || locMod==10){ //MYSA length
			nextLen = paralength1
		} else if (locMod == 2 || locMod == 9){ //FLUT length
			nextLen = paralength2
		} else{ //STIN length
			nextLen = interlength
		}

		// Add half current length to get next center point
		currLoc += prevLen + 0.5*nextLen
		prevLen = 0.5*nextLen
		section_coord.x[i] = currLoc * 1e-6 //Convert to um
	}
}

//bFiberBuilder(fiberD, axonnodes, type, temp, segdensity, [insert97na, conductances97], ParticleIndex)
proc init(){
  fiberD = 2 //default if no arg
  axonnodes = 30
  temp = 37
  ParticleIndex=1
  passive_end_nodes = 1
  gaines_channels = 0 // Set to 0 for MRG passive with localized K channels
  node_channels = 1
  if (numarg()>0) {fiberD=$1}
  if (numarg()>1) {axonnodes=$2}
  if (numarg()>2) {type=$3}
  if (numarg()>3) {temp=$4}
  if (numarg()>4) {segdensity=$5}
  if (numarg()==6) {ParticleIndex=$6}

  
  //if (numarg() == 7) {ekParam = $7}

  celsius = temp
  build()
}

endtemplate bFiberBuilder
