/*
Author: Nikki Pelot, adopted for SPARC ASCENT Pipeline by Eric Musselman

Description:

Instructions:
- Open NEURON's rxvt sh
- mpiexec -n <# processors> nrniv -mpi <.hoc filename including ".hoc" file extension>
*/

// Create parallel context instance
objref pc
pc = new ParallelContext()
print "number of processors: ", pc.nhost

if (!((passive_end_nodes == 0) || (passive_end_nodes == 1))) {
	print "passive_end_nodes must be set to 0 or 1"
	execerror("passive_end_nodes must be set to 0 or 1")
}
if (passive_end_nodes==0) {
	print "WARNING - Even though passive_end_nodes was set to 0, all fibers built with cFiberBuilder.hoc (fiber_type = 3, all c_fiber_model_type values) will have passive end nodes..."
}

/*
Extracellular [flag_whichstim=0], single intracellular pulse (stim1) [1], two intracellular pulses & change amplitude of second (stim2) [2]
If find_thresh = 1, define the stimulus for which you want to find thresh.
If find_thresh = 0, define the stimulus for which you want to test the stim amplitudes in 
*/
if (flag_whichstim == 2) {
	print "WARNING - Probably need to set N_minAPs = 2; currently, N_minAPs = ", N_minAPs
} else {
	print "WARNING - Probably need to set N_minAPs = 1; currently, N_minAPs = ", N_minAPs
}

// Turn on/off extracellular stim
if ((flag_whichstim == 0) && (flag_extracellular_stim == 0)) {
	execerror("Want to find_thresh for extracellular stim, so need flag_extracellular_stim = 1")
}

// ***************************************************************************
// CreateFiber_Unmyel.hoc
if (fiber_type == 1) {
	load_file("CreateFiber_Unmyel.hoc")
	Createfiber_Unmyel()
}

// ***************************************************************************
// CreateFiber_Myel.hoc	
if (fiber_type == 2) {
	load_file("CreateFiber_Myel.hoc")
	CreateFiber_Myel()
}

// ***************************************************************************
// cFiberBuilder.hoc
load_file("cFiberBuilder.hoc")
if (fiber_type == 3) {
	load_file("CreateFiber_CFiber.hoc")
	CreateFiber_CFiber() 
}

	   if 	(fiber_type == 1) { 	v_init = -88.3 				// [mV]
} else if   (fiber_type == 2) { 	v_init = -80 				// [mV]
} else if 	(fiber_type == 3) {		v_init = v_init_c_fiber		// [mV]
}

// ***************************************************************************	
// Train of intracellular pulses - automate
// NOTE: Define pulsewidth and interspike interval in pw_values and isi_values further down in Wrapper

objref stim1, stim2

IntraStim_PulseTrain_ind1 				= 2						// Index of node where intracellular stim is placed[unitless]
IntraStim_PulseTrain_ind2 				= 2						// Index of node where intracellular stim is placed[unitless]

if (fiber_type == 2) {// if myelinated fiber, convert node index to compartment index
	intrastim_ind_tmp1 = IntraStim_PulseTrain_ind1*11
	intrastim_ind_tmp2 = IntraStim_PulseTrain_ind2*11
} else {
	intrastim_ind_tmp1 = IntraStim_PulseTrain_ind1
	intrastim_ind_tmp2 = IntraStim_PulseTrain_ind2
}
s[intrastim_ind_tmp1].sec {
	stim1 		= new trainIClamp()
	stim1.loc(.5)
	//stim1.del 	= 5 				// Delay to first pulse [ms]
	//stim1.PW	= 						// Defined in pw_values [ms]
	//stim1.train = tstop-stim1.del 	// Duration of train of pulses [ms]
	//stim1.freq	= 1 				// Frequency of pulses [Hz]
	stim1.amp	= 0          			// Stim amplitude [nA]
}

s[intrastim_ind_tmp2].sec {
	stim2 		= new trainIClamp()
	stim2.loc(.5)
	//stim2.del 	= 5 				// Defined according to stim1.del and isi_values [ms]
	//stim2.PW	= 						// Defined in pw_values [ms]
	//stim2.train = tstop-stim1.del 	// Defined later once stim2.del is computed [ms]
	//stim2.freq	= 1 				// Frequency of pulses [Hz]
	stim2.amp	= 0 					// Stim amplitude [nA]
}

// ***************************************************************************	
// IntracellularStim.hoc
load_file("IntracellularStim.hoc")
IntraStim_PulseTrain()

// ***************************************************************************
// ExtracellularStim_Time.hoc
load_file("ExtracellularStim_Time.hoc")
if (flag_extracellular_stim == 1) {
	VeTime_read()
}

// ***************************************************************************
// ExtracellularStim_Space.hoc
strdef VeSpace_fname
load_file("ExtracellularStim_Space.hoc")

// ***************************************************************************
// Recording.hoc
objref checknode_values
checknode_values = new Vector(Nchecknodes,0)

if (Nchecknodes == fibernodes) {
	for i = 0, fibernodes - 1 {
		checknode_values.x[i] = i
	}
} else {

	if (fiber_type == 2) { // MRG
		fiber_length = (fibernodes-1)*deltax				// length of fiber [um]
		checknode_values.x[0] = int(1000/deltax)
		checknode_values.x[1] = int(0.5*(fibernodes-1))
		checknode_values.x[2] = int((fiber_length-1000)/deltax)
	}

	if (fiber_type == 3) { // CFiber
		fiber_length = (fibernodes-1)*deltax				// length of fiber [um]
		checknode_values.x[0] = int(0.1*(fibernodes-1))
		checknode_values.x[1] = int(0.5*(fibernodes-1))
		checknode_values.x[2] = int(0.9*(fibernodes-1))
	}
}

// Time points to record Vm and gating params vs x
objref checktime_values_ms, checktime_values
checktime_values_ms = new Vector(Nchecktimes,0)
checktime_values    = new Vector(Nchecktimes,0)

// Check times in milliseconds
checktime_values_ms.x[0] = 249.025
checktime_values_ms.x[1] = 249.05
checktime_values_ms.x[2] = 249.1
checktime_values_ms.x[3] = 249.2

// Check time indices
for i = 0, Nchecktimes-1 {
	checktime_values.x[i] = int(checktime_values_ms.x[i]/dt)
}

objref checknode_Ve_values
checknode_Ve_values 			= new Vector(1,0)
if (fiber_type == 2) {
	checknode_Ve_values.x[0]	= 11*int((fibernodes-1)/2)
} else {
	checknode_Ve_values.x[0]	= int((fibernodes-1)/2)
}

load_file("Recording.hoc")
Recording()

// ***************************************************************************
// Call sequence of procedures/functions for each sim
load_file("RunSim.hoc")

strdef fname_output_Vm_time
strdef fname_output_Vm_space
strdef fname_output_gating_m_time, fname_output_gating_h_time, fname_output_gating_mp_time, fname_output_gating_s_time
strdef fname_output_gating_m_space, fname_output_gating_h_space, fname_output_gating_mp_space, fname_output_gating_s_space
strdef Ve_fname_output, Istim_fname_output
strdef runtime_fname_output
strdef thresh_fname_output
strdef stim_units

if (flag_whichstim == 0) {
	stim_units = "mA"
} else if ((flag_whichstim == 1) || (flag_whichstim == 2)) {
	stim_units = "nA"
}

load_file("Saving.hoc")
load_file("Saving_Runtime.hoc")

if (find_thresh == 1){
	load_file("FindThresh.hoc")
	load_file("Saving_Thresh.hoc")
}

proc run_all(){local myinner, myfiber, myfreq, myamp, mypw, myisi
	myinner  = $1
	myfiber  = $2
	myfreq  = $3
	myamp   = $4
	mypw    = $5
	myisi   = $6
	
	// Set PW of intracellular stim
	stim1.PW = mypw
	stim2.PW = mypw
	
	// Set ISI between intracellular stim and duration of second stim train
	stim2.del =  stim1.del + myisi
	stim2.train = tstop - stim2.del
	trun_individual = startsw()
	
	// Read in Ve(x)
	sprint(VeSpace_fname, "data/inputs/inner%d_fiber%d.dat",	myinner,myfiber)
	VeSpace_read()
	// Convert to mV (required for e_extracellular)
	VeSpace_data = VeSpace_data.mul(1000)
	
	if (find_thresh == 0) {
		RunSim(myamp)
		
		// Save data
		sprint(Ve_fname_output, 			 "data/outputs/Ve_inner%d_fiber%d_Vblocamp%fmA%fkHz.dat", 			   myinner, myfiber, myamp, myfreq)
		sprint(Istim_fname_output,   		 "data/outputs/Istim_inner%d_fiber%d_Vblocamp%fmA%fkHz.dat", 		   myinner, myfiber, myamp, myfreq)
		sprint(fname_output_Vm_time, 		 "data/outputs/Vm_time_inner%d_fiber%d_Vblocamp%fmA%fkHz.dat", 		   myinner, myfiber, myamp, myfreq)
		sprint(fname_output_gating_m_time,   "data/outputs/gating_m_time_inner%d_fiber%d_Vblocamp%fmA%fkHz.dat",   myinner, myfiber, myamp, myfreq)
		sprint(fname_output_gating_h_time,   "data/outputs/gating_h_time_inner%d_fiber%d_Vblocamp%fmA%fkHz.dat",   myinner, myfiber, myamp, myfreq)
		sprint(fname_output_gating_mp_time,  "data/outputs/gating_mp_time_inner%d_fiber%d_Vblocamp%fmA%fkHz.dat",  myinner, myfiber, myamp, myfreq)
		sprint(fname_output_gating_s_time,   "data/outputs/gating_s_time_inner%d_fiber%d_Vblocamp%fmA%fkHz.dat",   myinner, myfiber, myamp, myfreq)
		sprint(fname_output_Vm_space, 		 "data/outputs/Vm_space_inner%d_fiber%d_Vblocamp%fmA%fkHz.dat",        myinner, myfiber, myamp, myfreq)
		sprint(fname_output_gating_m_space,  "data/outputs/gating_m_space_inner%d_fiber%d_Vblocamp%fmA%fkHz.dat",  myinner, myfiber, myamp, myfreq)
		sprint(fname_output_gating_h_space,  "data/outputs/gating_h_space_inner%d_fiber%d_Vblocamp%fmA%fkHz.dat",  myinner, myfiber, myamp, myfreq)
		sprint(fname_output_gating_mp_space, "data/outputs/gating_mp_space_inner%d_fiber%d_Vblocamp%fmA%fkHz.dat", myinner, myfiber, myamp, myfreq)
		sprint(fname_output_gating_s_space,  "data/outputs/gating_s_space_inner%d_fiber%d_Vblocamp%fmA%fkHz.dat",  myinner, myfiber, myamp, myfreq)
		Saving()
		
		// Save individual run time (for each simulation)
		trun_individual = startsw() - trun_individual
		sprint(runtime_fname_output, "data/outputs/runtime_inner%d_fiber%d_Vblocamp%f.dat", myinner, myfiber, myamp)
		Saving_Runtime()

	}   else if (find_thresh == 1){
		FindThresh(myinner)
		RunSim(stimamp)

		// Save data			
		sprint(Ve_fname_output,              "data/outputs/Ve_inner%d_fiber%d.dat",              myinner, myfiber)
		sprint(Istim_fname_output,           "data/outputs/Istim_inner%d_fiber%d.dat",           myinner, myfiber)
		sprint(fname_output_Vm_time,         "data/outputs/Vm_time_inner%d_fiber%d.dat",         myinner, myfiber)
		sprint(fname_output_gating_m_time,   "data/outputs/gating_m_time_inner%d_fiber%d.dat",   myinner, myfiber)
		sprint(fname_output_gating_h_time,   "data/outputs/gating_h_time_inner%d_fiber%d.dat",   myinner, myfiber)
		sprint(fname_output_gating_mp_time,  "data/outputs/gating_mp_time_inner%d_fiber%d.dat",  myinner, myfiber)
		sprint(fname_output_gating_s_time,   "data/outputs/gating_s_time_inner%d_fiber%d.dat",   myinner, myfiber)
		sprint(fname_output_Vm_space,        "data/outputs/Vm_space_inner%d_fiber%d.dat",        myinner, myfiber)
		sprint(fname_output_gating_m_space,  "data/outputs/gating_m_space_inner%d_fiber%d.dat",  myinner, myfiber)
		sprint(fname_output_gating_h_space,  "data/outputs/gating_h_space_inner%d_fiber%d.dat",  myinner, myfiber)
		sprint(fname_output_gating_mp_space, "data/outputs/gating_mp_space_inner%d_fiber%d.dat", myinner, myfiber)
		sprint(fname_output_gating_s_space,  "data/outputs/gating_s_space_inner%d_fiber%d.dat",  myinner, myfiber)
		
		Saving()
		
		// Save individual run time (for each simulation)
		trun_individual = startsw() - trun_individual
		sprint(runtime_fname_output, "data/outputs/runtime_inner%d_fiber%d.dat", myinner, myfiber)
		Saving_Runtime()
		
		// Save threshold value
		sprint(thresh_fname_output, "data/outputs/thresh_inner%d_fiber%d.dat", myinner, myfiber)
		Saving_Thresh()
	} 
}

// ***************************************************************************
// Loop through model numbers, innericles (different Ve(x) profiles), Ve amplitudes, Ve freq's, fibers (multiple within 1 innericle)

objref inner_values
inner_values = new Vector(Ninners,0)

for inner_ind = 0, Ninners-1 {
	inner_values.x[inner_ind] = inner_ind
}

objref num_fibers_file, fiber_values
num_fibers_file = new File()
num_fibers_file.ropen(num_fibers_fname)
fiber_values = new Vector(Ninners)
fiber_values.scanf(num_fibers_file)
num_fibers_file.close()

Npw = 1 // Number of intracellular PWs to test; applied to both Istim1 & Istim2
objref pw_values
pw_values = new Vector(Npw,0)
pw_values.x[0] = 0 // [ms]

Nisi = 1 // Number of interspike intervals to test (between intracellular stim 1 & 2)
objref isi_values
isi_values = new Vector(Nisi,0)
isi_values.x[0] = 0 // [ms]

trun = startsw()

// Start execute loop on the workers
{pc.runworker()}
// Code beyond this point (til pc.done()) is only executed by the master.
// The master must now post jobs to the bulletin board.

proc batchrun() {local model_ind, inner_ind, fiber_ind, Vefreq_ind, stimamp_ind, pw_ind, isi_ind
	for model_ind = 0, Nmodels-1 {
		for inner_ind = 0, Ninners-1 {
			for fiber_ind = 0, fiber_values.x[inner_ind]-1 {
				for Vefreq_ind = 0, Nfreq-1 {
					for stimamp_ind = 0, Namp-1 {
						for pw_ind = 0, Npw-1 {
							for isi_ind = 0, Nisi-1 {
								// mymodel, myinner, myfiber, myfreq, myamp, mypw, myisi
								pc.submit("run_all",inner_values.x[inner_ind],fiber_ind,Vefreq_values.x[Vefreq_ind],stimamp_values.x[stimamp_ind],pw_values.x[pw_ind],isi_values.x[isi_ind])
							}
						}
					}
				}
			}
		}
	}
	// If a result is ready, get it. If not, pick a job to do.
	while (pc.working()) {
	}
}
batchrun()

// Save the runtime to a file
objref f_runtime
f_runtime = new File()
f_runtime.wopen("Data/Outputs/run_time.dat")
f_runtime.printf("Run time: %f seconds", startsw()-trun)
f_runtime.close()
{pc.done()}
//quit()
