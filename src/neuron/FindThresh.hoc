/*
Author: Nikki Pelot, modified by Eric Musselman
Date created: February 5, 2016

Description:
- Binary search algorithm to find threshold.

Important notes:
- 

Variables that must be defined in wrapper/params file:
- thresh_resoln
- stimamp_bottom_init
- stimamp_top_init
- pc = new ParallelContext()
*/

// Vector containing results to pass back to batch run
objref thresh_values
Nresults = 1
thresh_values = new Vector(Nresults,0)

// Find threshold with a binary search algorithm
proc FindThresh() {//local key
	fasc = $1
	
	stimamp_top       = stimamp_top_init.x[fasc-1]
	stimamp_bottom    = stimamp_bottom_init .x[fasc-1]
	check_top_flag    = 0
	check_bottom_flag = 0

	while(1) {

		if (check_top_flag == 0) {
			print "Running stimamp_top = ", stimamp_top
			RunSim(stimamp_top)
			N_APs_top = N_APs
			print "N_APs_top = ", N_APs
		}

		if (N_APs_top == 0) {
			print "ERROR: Initial stimamp_top value does not elicit an AP (find_block_thresh = 0) or does not block (find_block_thresh = 1) - need to increase its magnitude and/or increase tstop to detect evoked AP"
			// multiply simamptop by 1.1
			stimamp_top    = stimamp_top*1.1
			check_top_flag = 0
			//return 0
		} else {
			check_top_flag = 1
		}


		if (check_bottom_flag == 0) {
			print "Running stimamp_bottom = ", stimamp_bottom
			RunSim(stimamp_bottom)
			N_APs_bottom = N_APs
			print "N_APs_bottom = ", N_APs
		}

		if (N_APs_bottom != (0)) {
			print "ERROR: Initial stimamp_bottom value elicits an AP (find_block_thresh = 0) or blocks (find_block_thresh = 1) - need to decrease its magnitude and/or increase tstop to detect block test pulses"
			// multiply simampbottom by 0.9
			stimamp_bottom    = stimamp_bottom*0.9
			check_bottom_flag = 0
			//return 0
		} else {
			check_bottom_flag = 1
		}

		if (N_APs_top != 0 && N_APs_bottom == 0) {
			print "Bounds set - entering binary search"
			break
		}
	}

	while(1) {
		stimamp_prev   = stimamp_top

		stimamp = (stimamp_bottom + stimamp_top) / 2
		print "stimamp = ", stimamp, "mA for extracellular and nA for intracellular (check flag_whichstim)"
		RunSim(stimamp)
		print "N_APs = ", N_APs
		//if ((abs((stimamp_bottom - stimamp_top) / 2)) < thresh_resoln) {	// resolution of search
		if ((abs((stimamp_bottom - stimamp_top) / stimamp_top)) < thresh_resoln) {	// resolution of search
			// Use last amplitude that produced an action potential
			if (N_APs == 0) {
				stimamp = stimamp_prev
			}
			
			print "Done searching! stimamp: ", stimamp, "mA for extracellular and nA for intracellular (check flag_whichstim)"
			
			RunSim(stimamp)
			
			//save_data(myPW,myPW_ind,myfibernum,stimamp)
			break
		} else if (N_APs >= 1) {				// found an AP
			if (find_block_thresh == 1) {
				stimamp_prev = stimamp
				stimamp_top = stimamp
			} else if (find_block_thresh == 0) {
				stimamp_prev = stimamp
				stimamp_top  = stimamp
			}

		} else if (N_APs == 0) {				// no AP
			if (find_block_thresh == 1) {
				stimamp_bottom = stimamp
			} else if (find_block_thresh == 0) {
				stimamp_bottom = stimamp
				stimamp_prev = stimamp_top
			}
		}
			
		print "stimamptop ", stimamp_top
		print "stimampbottom ", stimamp_bottom

	}

	print "Threshold: ", stimamp, "mA for extracellular and nA for intracellular (check flag_whichstim)"
	// print "Just Beneath Threshold: ", stimamp_bottom, "mA"
	//print "CV: ",   , "mm/ms"
		
	thresh_values.x[0] = stimamp
		
	// pc.pack(thresh_values)
	// pc.post(key)
	// return key
}