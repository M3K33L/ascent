
//***************** Environment *****************
celsius   = 37 // [degC]

//***************** Global Time ******************
dt        = 0.001 // [ms]
tstop     = 50 // [ms]
n_tsteps  = 49998 // [unitless]
t_initSS  = -200 // [ms]
dt_initSS = 10 // [ms]

//***************** Fiber Parameters *************
geometry_determination_method = 0 // geometry_determination_method = 0 for preset fiber diameters; geometry_determination_method = 1 for MRG-based geometry interpolation; geometry_determination_method = 2 for GeometryBuilder fits from SPARC Y2Q1
flag_model_b_fiber = 0
fiber_type = 2 // fiber_type = 1 for unmyelinated; fiber_type = 2 for myelinated; fiber_type = 3 for c fiber built from cFiberBuilder.hoc
node_channels = 0 // node_channels = 0 for MRG; node_channels = 1 for Schild 1994
large_end_nodes      = 0
passive_end_nodes = 1 // passive_end_nodes = 1 to make both end nodes passive; 0 otherwise

//***************** Intracellular Stim ***********
IntraStim_PulseTrain_delay    = 0.00 // [ms]
IntraStim_PulseTrain_pw       = 0.00 // [ms]
IntraStim_PulseTrain_traindur = tstop - IntraStim_PulseTrain_delay // [ms]
IntraStim_PulseTrain_freq     = 0.00 // [Hz]
IntraStim_PulseTrain_amp      = 0.0000 // [nA]
IntraStim_PulseTrain_ind      = 2 // Index of node where intracellular stim is placed [unitless]

//***************** Extracellular Stim ***********
strdef VeTime_fname
VeTime_fname            = "data/inputs/waveform.dat"
flag_extracellular_stim = 1 // Set to zero for off; one for on 
flag_whichstim = 0 // Set to zero for off; one for on 

//***************** Recording ********************
saveflag_Vm_time      = 0
saveflag_gating_time  = 0
saveflag_Vm_space     = 0
saveflag_gating_space = 0
saveflag_Ve           = 0
saveflag_Istim        = 0
saveflag_runtime      = 0
saveflag_ap_loctime   = 0

//***************** Protocol Parameters *********

ap_thresh = -30
N_minAPs  = 1
ap_detect_location  = 0.90

rel_increment = 0.1000
increment_flag = 1 // 

rel_thresh_resoln = 0.0100
termination_flag = 0 // 
max_iter = 100 // 
Namp = 1
objref stimamp_values
stimamp_values = new Vector(Namp,0)
stimamp_values.x[0] = 0.0000

find_thresh = 1 // find_thresh = 0 if not doing threshold search; find_thresh = 1 if looking for threshold
find_block_thresh = 0 // If find_thresh==1, can also set find_block_thresh = 1 to find block thresholds instead of activation threshold

//***************** Classification Checkpoints ***
Nchecktimes = 1 
objref checktime_values_ms, checktime_values
checktime_values_ms = new Vector(Nchecktimes,0)
checktime_values = new Vector(Nchecktimes,0)

// Check times in milliseconds
checktime_values_ms.x[0] = 0 

Nchecknodes = 1
objref checknode_values
checknode_values = new Vector(Nchecknodes,0)
if (Nchecknodes == axonnodes) {
	for i = 0, axonnodes - 1 {
		checknode_values.x[i] = i
	}
} else {
	axon_length = (axonnodes-1)*deltaz				// length of axon [um]
	checknode_values.x[0] = int(axon_length*0/deltaz)
}

load_file("../../HOC_Files/Wrapper.hoc")
